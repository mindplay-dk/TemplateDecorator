<?php

/**
 * ProcessWire Template Decorator
 *
 * @version 1.0.1
 * @author Rasmus Schultz
 * @website http://blog.mindplay.dk/
 * @license GPL v3
 *
 * This module allows you to add a colorful badge and/or select an icon to
 * display on the page-list for a given template.
 */

/**
 * @property $default_icon string
 * @property $show_template bool
 */
class TemplateDecorator extends WireData implements Module, ConfigurableModule
{
  public function __construct()
  {
    $this->default_icon = '';
  }

  /**
   * getModuleInfo is a module required by all modules to tell ProcessWire about them
   *
   * @return array
   */
  public static function getModuleInfo()
  {
    return array(
      'title' => 'Template Decorator',
      'version' => 101,
      'summary' => 'Optionally add colorful badges and icons to Templates and Pages - this can improve the sitemap view, when you have many different Templates installed, and may help with comprehension in general.',
      'permission' => 'template-admin', 
      'href' => '',
      'singular' => true,
      'autoload' => true,
    );
  }

  public function init()
  {
    // hooks into template form:
    $this->addHookAfter('ProcessTemplate::buildEditForm', $this, 'hookAddForm');
    $this->addHookBefore('ProcessTemplate::executeSave', $this, 'hookSaveForm');

    // hooks into the page-list:
    $this->addHookBefore('ProcessPageList::execute', $this, 'hookPageList');
    $this->addHookAfter('ProcessPageListRender::getPageLabel', $this, 'hookPageLabel');

    // hook into page-editor:
    $this->addHookAfter('ProcessPageEdit::buildForm', $this, 'hookPageEditForm');
  }
  
  static public function getModuleConfigInputfields(array $data)
  {
    /**
     * @var $fields InputfieldWrapper
     * @var $default_icon InputfieldText
     * @var $show_template InputfieldCheckbox
     */

    $modules = Wire::getFuel('modules');

    $fields = new InputfieldWrapper();

    $default_icon = $modules->get('InputfieldText');
    $default_icon->attr('name', 'default_icon');
    $default_icon->attr('value', isset($data['default_icon']) ? $data['default_icon'] : '');
    $default_icon->label = 'Default Icon';
    $default_icon->description = 'Enter the filename of the default icon (for templates/pages with no defined icon)';
    $default_icon->notes = 'Try "blank.png" for no icon, or "page.png" for a simple, empty page icon.';

    $show_template = $modules->get('InputfieldCheckbox');
    $show_template->attr('name', 'show_template');
    $show_template->attr('value', '1');
    if (@$data['show_template'] == '1') {
      $show_template->attr('checked', 'checked');
    }
    $show_template->label = 'Show Template Name';
    $show_template->description = 'Displays the name of the Template in the page title when editing a Page.';

    $fields->append($default_icon);
    $fields->append($show_template);

    return $fields;
  }

  public function hookPageEditForm(HookEvent $event)
  {
    /**
     * @var $page Page
     * @var $template Template
     * @var $form InputfieldForm
     * @var $content Inputfield
     * @var $directions InputfieldMarkup
     */

    $modules = Wire::getFuel('modules');

    $module = $event->object;

    // invasive maneauvers to get the Page being edited:
    $class = new ReflectionClass(get_class($module));
    $prop = $class->getProperty('page');
    $prop->setAccessible(true);
    $page = $prop->getValue($module);

    $template = $page->template;

    $this->setFuel('processHeadline', $template->get('label|name') . ': ' . $page->get('title|name'));

    if (isset($template->directions) && !empty($template->directions)) {
      $directions = wire('modules')->get('InputfieldMarkup');
      $directions->markupText = $template->directions;

      $form = $event->return;
      $content = $form->children->first();
      $content->prepend($directions);
    }
  }

  public function hookAddForm(HookEvent $event)
  {
    /**
     * @var $form InputfieldForm
     * @var $badge InputfieldMarkup
     * @var $label InputfieldText
     * @var $color InputfieldText
     * @var $icons string[]
     * @var $icon InputfieldSelect
     * @var $directions InputfieldTextarea
     */

    $form = $event->return;

    $template = $this->templates->get($event->arguments('template'));

    $decorations = new InputfieldWrapper();

    $decorations->attr('title', $this->_x('Decorations', 'tab'));
    $decorations->head = $this->_('Decorate Templates and Pages');
    $decorations->attr('class', 'WireTab');

    /*
    $badge = $this->modules->get('InputfieldMarkup');
    $badge->markupText = '<h2>' . htmlspecialchars($this->_('Badge')) . '</h2>'
      . $this->_('Display a colorful badge in the Page List');
    */

    $label = $this->modules->get('InputfieldText');
    $label->label = $this->_('Badge Label');
    $label->attr('id+name', 'badge_label');
    $label->attr('value', $template->badge_label);
    $label->columnWidth = 50;

    $color = $this->modules->get('InputfieldText');
    $color->label = $this->_('Badge Color');
    $color->attr('id+name', 'badge_color');
    $color->attr('value', $template->badge_color);
    $color->columnWidth = 50;

    $directions = wire('modules')->get('InputfieldTinyMCE');
    $directions->description = 'Enter directions for the person editing the Page.';
    $directions->attr('id+name', 'directions');
    $directions->attr('value', $template->directions);
    $directions->attr('rows', 10);
    $directions->label = $this->_('Directions');

    $icons = $this->getIcons();
    $icons_url = $this->getIconUrl();
    $icons_license = $this->config->paths->TemplateDecorator.'icons/LICENSE.txt';

    $icon = $this->modules->get('InputfieldSelect');
    $icon->label = $this->_('Page Icon');
    $icon->addOption('');
    $icon->attr('id+name', 'page_icon');
    $icon->attr('value', $template->page_icon);
    $icon->addOptions($icons);

    $icon->addHookAfter('render', null, function(HookEvent $event) use($icons, $icons_url, $icons_license) {
      $event->return .= '<div id="TemplateDecorator-icons">';

      foreach ($icons as $icon => $name) {
        $event->return .= '<img title="'.htmlspecialchars($name).'" src="'.$icons_url.$icon.'" data-icon="'.$icon.'" />';
      }

      $event->return .= '</div>';

      if (file_exists($icons_license)) {
        $event->return .= file_get_contents($icons_license);
      }
    });

    #$t->add($badge);
    $decorations->add($label);
    $decorations->add($color);
    $decorations->add($directions);
    $decorations->add($icon);

    $decorations->addHookAfter('render', $this, 'hookAfterRender');

    $form->add($decorations);
  }

  private function addCss()
  {
    $this->config->styles->add($this->config->urls->TemplateDecorator . "TemplateDecorator.css");
  }

  /**
   * @return string[] list of icons, where $filename => $display_name
   */
  private function getIcons()
  {
    static $icons;

    if (!isset($icons)) {
      $icons = array();
      foreach (glob($this->config->paths->TemplateDecorator.'icons/*.png') as $icon) {
        $filename = basename($icon);
        $name = ucwords(strtr(basename($filename,'.png'), '-_', '  '));
        $icons[$filename] = $name;
      }
    }

    return $icons;
  }

  /**
   * @return string base URL for page icons
   */
  private function getIconUrl()
  {
    return $this->config->urls->TemplateDecorator.'icons/';
  }

  public function hookAfterRender(HookEvent $event)
  {
    $this->config->scripts->add($this->config->urls->TemplateDecorator . "TemplateDecorator.js");
    $this->addCss();

    $event->return .= '<script> $(document).ready(function() { TemplateDecorator.init(); }); </script>';
  }

  public function hookSaveForm($event)
  {
    $label = isset($this->input->post->badge_label) ? $this->input->post->badge_label : null;
    $color = isset($this->input->post->badge_color) ? $this->input->post->badge_color : null;
    $icon = isset($this->input->post->page_icon) ? $this->input->post->page_icon : null;
    $directions = isset($this->input->post->directions) ? $this->input->post->directions : null;

    $template = $this->templates->get($this->input->post->id);

    if ($template->directions != $directions || $template->badge_label != $label || $template->badge_color != $color || $template->page_icon != $icon) {
      $this->message($this->_("Changed Template Decoration"));
    }

    $template->badge_label = $label;
    $template->badge_color = $color;
    $template->page_icon = $icon;
    $template->directions = $directions;
  }

  public function hookPageList(HookEvent $event)
  {
    $this->addCss();
  }

  public function hookPageLabel(HookEvent $event)
  {
    /**
     * @var Page $page
     * @var Template $template
     */

    $page = $event->argumentsByName('page');

    $template = $page->template;

    if (isset($template->page_icon) || !empty($this->default_icon)) {
      $url = $this->getIconUrl() . (empty($template->page_icon) ? $this->default_icon : $template->page_icon);

      $event->return = '<img class="TemplateDecorator-icon" src="'.$url.'" />'.$event->return;
    }

    if (isset($template->badge_color)) {
      $color = $template->badge_color;

      if (isset($template->badge_label)) {
        $label = $template->badge_label;
      } else if (isset($template->label)) {
        $label = $template->label;
      } else {
        $label = $template->name;
      }

      $event->return .= '<span class="TemplateDecorator-badge" style="background:'.$color.'">'.$label.'</span>';
    }
  }
}
